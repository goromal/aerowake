#!/usr/bin/python

import rospy, tf
import numpy as np
from math import sqrt, pi
from geometry_msgs.msg import QuaternionStamped, TransformStamped, Pose, Point, PoseStamped, WrenchStamped
from visualization_msgs.msg import Marker
from nav_msgs.msg import Odometry
import tf.transformations as TR

def homogeneous_matrix(trans, quat):
    return TR.concatenate_matrices(TR.translation_matrix(trans), TR.quaternion_matrix(quat))

def quat_from_two_vectors(u_, v_):
    qx = 0.0
    qy = 0.0
    qz = 0.0
    qw = 1.0
    u = u_ / np.linalg.norm(u_)
    v = v_ / np.linalg.norm(v_)

    d = np.dot(u, v)
    if d < 0.99999999 and d > -0.99999999:
        invs = 1.0/sqrt(2.0*(1.0+d))
        xyz = np.cross(u, v*invs)
        qw = 0.5/invs
        qx = xyz[0]
        qy = xyz[1]
        qz = xyz[2]
    elif d < -0.99999999: # infinite number of solutions; picking one
        qw = 0.0
        qx = 1.0
        qy = 0.0
        qz = 0.0
    # else keep identity rotation

    q_norm = np.linalg.norm(np.array([qx, qy, qz, qw]))
    return (qx/q_norm, qy/q_norm, qz/q_norm, qw/q_norm)

class Spoofer(object):
    def __init__(self):
        self.tf_BR             = tf.TransformBroadcaster()

        self.northMarkerPub = rospy.Publisher("north_marker", Marker, queue_size=1)
        self.northMarker = Marker()
        self.northMarker.header.frame_id = "boat"
        self.northMarker.type = Marker.ARROW
        self.northMarker.action = Marker.ADD
        self.northMarker.pose = Pose()
        self.northMarker.pose.position.x = 0.0
        self.northMarker.pose.position.y = 0.0
        self.northMarker.pose.position.z = -5.0
        self.northMarker.scale.x = 2.0
        self.northMarker.scale.y = 0.25
        self.northMarker.scale.z = 0.25
        self.northMarker.color.r = 0.5
        self.northMarker.color.g = 0.5
        self.northMarker.color.b = 0.5
        self.northMarker.color.a = 1.0

        self.qrel_sub = rospy.Subscriber("q_rel", QuaternionStamped, self.qrelCallback)

    def qrelCallback(self, msg):
        self.northMarker.pose.orientation.x = -msg.quaternion.x
        self.northMarker.pose.orientation.y = -msg.quaternion.y
        self.northMarker.pose.orientation.z = -msg.quaternion.z
        self.northMarker.pose.orientation.w = msg.quaternion.w

        self.northMarkerPub.publish(self.northMarker)

def main():
    rospy.init_node("north_spoofer", anonymous=True)
    es = Spoofer()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down north spoofer node")

if __name__ == "__main__":
    main()